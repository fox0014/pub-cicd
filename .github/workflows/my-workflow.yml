# This is a basic workflow to help you get started with Actions

name: GitHub Actions CI

# Controls when the actions will run. Triggers the workflow on push or pull request
# events but only for the master branch
on:
  push:
    branches: [ master ]
#  pull_request:
#    branches: [ master ]
    paths-ignore:
    - 'README.md'
  schedule:
    # cron job
    - cron:  '0 11 * * *'

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "build"
  build:
    name: My Build
    # The type of runner that the job will run on
    runs-on: ubuntu-latest
    container: python:3.8.1-buster
    # Service containers to run with `container-job`
    services:
      # Label used to access the service container
      redis:
        # Docker Hub image
        image: redis
        # Set health checks to wait until redis has started
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
    # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
    - uses: actions/checkout@v2

    # Runs a single command using the runners shell
    - name: pip install
      run: |
        pip install -r requirements.txt

    # Runs a set of commands using the runners shell
    - name: Run a multi-line script
      # 指定超时分钟数（Default: 360）
      # 每个Job最大时长是默认的360分钟，超过后会被触发取消操作，而不是超时操作，所以最好设置一个超时时间触发超时
      timeout-minutes: 300
      # 即使步骤出错也继续运行
      continue-on-error: true    
      env:
        MY_VAR: "Hi there! My name is"
        FIRST_NAME: "Mona"
        MIDDLE_NAME: "The"
        LAST_NAME: "Octocat"
      run: |
        echo $MY_VAR $FIRST_NAME $MIDDLE_NAME $LAST_NAME.
        echo test, and deploy your project.

    # Runs a set of commands using the runners shell
    - name: Run a multi-line script
      # 指定超时分钟数（Default: 360）
      # 每个Job最大时长是默认的360分钟，超过后会被触发取消操作，而不是超时操作，所以最好设置一个超时时间触发超时
      timeout-minutes: 300
      # 即使步骤出错也继续运行
      continue-on-error: true
      run: |
        python redis-test/source/test.py